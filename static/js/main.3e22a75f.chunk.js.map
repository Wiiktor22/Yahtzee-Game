{"version":3,"sources":["components/UpperSection.js","components/LowerSection.js","components/HelpPage.js","components/FinishedGame.js","components/Game.js","components/App.js","index.js"],"names":["UpperSection","props","useState","wasChosen","setWasChosen","points","setPoints","textForTable","normalPoints","setNormalPoints","totalPoints","setTotalPoints","infoRound","setInfoRound","settingPoints","newValues","map","item","index","number","dices","actualPoints","actualDice","checkPossibilityToPlay","useEffect","canPlay","changeCanPlay","resetTablePoints","round","sumUpPoints","normalValue","totalValue","className","scope","key","onClick","setDefault","handlePointTableClick","LowerSection","checkNumberOfKind","ruleNumber","amountofNumber","dice","checkOddOrEven","checkStraight","tab","numbers","lenght","checkChance","sum","arrayOfRules","HelpPage","FinishedGame","window","moveTo","location","reload","Game","queue","setQueue","setRound","setDices","blockItem","setBlockItem","setCanPlay","showHelp","setShowHelp","arrayOfID","forceUpdate","useForceUpdate","renderTable","value","handleDiceClick","randomValue","Math","floor","random","alert","App","ReactDOM","render","document","getElementById"],"mappings":"kLAwHeA,EAtHM,SAAAC,GAAU,IAAD,EACQC,mBAAS,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,IADrD,mBACnBC,EADmB,KACRC,EADQ,OAEEF,mBAAS,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,OAF1C,mBAEnBG,EAFmB,KAEXC,EAFW,KAGpBC,EAAe,CAAC,OAAQ,OAAQ,SAAU,QAAS,QAAS,SAHxC,EAIcL,mBAAS,GAJvB,mBAInBM,EAJmB,KAILC,EAJK,OAKYP,mBAAS,GALrB,mBAKnBQ,EALmB,KAKNC,EALM,OAMQT,mBAAS,IANjB,mBAMnBU,EANmB,KAMRC,EANQ,KAoBpBC,EAAgB,WAClB,IAAIC,EAAYV,EAChBU,EAAUC,KAAI,SAACC,EAAMC,GAIjB,OAHKf,EAAUe,KACXH,EAAUG,GAhBS,SAAAC,GAC3B,IAAIJ,EAAYd,EAAMmB,MAClBC,EAAe,EACfC,EAAaH,EAAS,EAM1B,OALAJ,EAAUC,KAAI,SAAAC,GACNA,IAASK,IACTD,GAAgBC,MAGjBD,EAOoBE,CAAuBL,IAEvCH,KAEXT,EAAUS,IAGdS,qBAAU,WACiB,OAAnBvB,EAAMmB,MAAM,IAAenB,EAAMwB,SACjCX,IAEJb,EAAMyB,kBACP,CAACzB,EAAMwB,UAEVD,qBAAU,WACNG,IACAd,EAAaD,EAAY,KAC1B,CAACX,EAAM2B,QAEV,IASMC,EAAc,WAChBlB,EAAe,GACfF,EAAgB,GAChB,IAAIqB,EAActB,EACduB,EAAarB,EACjBoB,EAAc,EACdzB,EAAOW,KAAI,SAAAC,GACPa,GAAeb,KAEnBc,EAAaD,EACTA,EAAc,KACdC,GAAc,KAElBpB,EAAeoB,GACftB,EAAgBqB,IAGdH,EAAmB,WACrB,IAAIZ,EAAYV,EAChBU,EAAUC,KAAI,SAACC,EAAMC,GACZf,EAAUe,KACXH,EAAUG,GAAS,SAG3BZ,EAAUS,IAGd,OACI,oCACI,yBAAKiB,UAAU,gBACX,2BAAOA,UAAU,uBACb,+BACI,wBAAIA,UAAU,wBACV,wBAAIC,MAAM,MAAMD,UAAU,wBAA1B,iBACA,wBAAIC,MAAM,MAAMD,UAAU,wBAA1B,WAEH3B,EAAOW,KAAI,SAACC,EAAMC,GAAP,OACR,wBAAIc,UAAU,uBAAuBE,IAAK3B,EAAaW,IACnD,wBAAIe,MAAM,MAAMD,UAAU,wBACrBzB,EAAaW,IAElB,wBACIc,UAAW7B,EAAUe,GAAS,GAAK,WACnCiB,QAAS,kBApDX,SAAAhB,GAC1B,IAAIJ,EAAYZ,EAChBY,EAAUI,IAAU,EACpBf,EAAaW,GACbd,EAAMmC,aACNT,IACAE,IA8C2CQ,CAAsBnB,KACvCD,OAGV,wBAAIe,UAAU,wBACV,wBAAIC,MAAM,MAAMD,UAAU,wBAA1B,SACA,4BAAKxB,IAET,wBAAIwB,UAAU,wBACV,wBAAIC,MAAM,MAAMD,UAAU,wBAA1B,4BACA,4BAAKxB,EAAe,GAAK,MAAQ,MAErC,wBAAIwB,UAAU,wBACV,wBAAIC,MAAM,OAAV,0BACA,4BAAKvB,SCsClB4B,EAnJM,SAAArC,GAAU,IAAD,EACQC,mBAAS,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,IADnE,mBACnBC,EADmB,KACRC,EADQ,OAEEF,mBAAS,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,OAFtD,mBAEnBG,EAFmB,KAEXC,EAFW,KAGpBC,EAAe,CAAC,YAAa,YAAa,MAAO,OAAQ,eAAgB,gBAAiB,UAAW,UAHjF,EAIcL,mBAAS,GAJvB,mBAInBM,EAJmB,KAILC,EAJK,OAKQP,mBAAS,IALjB,mBAKnBU,EALmB,KAKRC,EALQ,KAOpB0B,EAAoB,SAAAC,GACtB,IAAInC,EAAS,EAAGoC,EAAiB,EAgBjC,MAfgB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GACxBzB,KAAI,SAAAC,GACRhB,EAAMmB,MAAMJ,KAAI,SAAA0B,GACRA,IAASzB,GACTwB,OAGJA,GAAkBD,IAClBnC,EAASmC,EAAavB,EACH,IAAfuB,IACAnC,GAAU,KAGlBoC,EAAiB,KAEdpC,GAGLsC,EAAiB,SAAAH,GACnB,IAAInC,EAAS,EAMb,OALAJ,EAAMmB,MAAMJ,KAAI,SAAAC,GACTA,EAAO,IAAMuB,IACZnC,GAAUY,MAGXZ,GAGLuC,EAAgB,SAAAC,GAClB,IAAIxC,EAAS,EACTyC,EAAUD,EASd,OARA5C,EAAMmB,MAAMJ,KAAI,SAAAC,GACZ6B,EAAQ9B,KAAI,SAACG,EAAQD,GACbD,IAASE,IACTd,IACAyC,EAAQ5B,GAAS,SAId,IAAXb,EACoC,IAAhCyC,EAAQA,EAAQC,OAAS,GAAiB,GAClC,GAEL,GAITC,EAAc,WAChB,IAAIC,EAAM,EAIV,OAHAhD,EAAMmB,MAAMJ,KAAI,SAAAC,GACZgC,GAAOhC,KAEJgC,GAcLtB,EAAmB,WACrB,IAAIZ,EAAYV,EAChBU,EAAUC,KAAI,SAACC,EAAMC,GACZf,EAAUe,KACXH,EAAUG,GAAS,SAG3BZ,EAAUS,IAYRsB,EAAwB,SAAAlB,GAC1B,IAAIJ,EAAYZ,EAChBY,EAAUI,IAAU,EACpBf,EAAaW,GACbd,EAAMmC,aACNT,IAdgB,WAChBlB,EAAgB,GAChB,IAAIqB,EAAc,EAClBzB,EAAOW,KAAI,SAAAC,GACPa,GAAeb,KAEnBR,EAAgBqB,GAShBD,IAeJ,OAZAL,qBAAU,WACiB,OAAnBvB,EAAMmB,MAAM,IAAenB,EAAMwB,SAxCnB,WAClB,IAAIV,EAAYV,EACV6C,EAAe,CAACX,EAAkB,GAAIA,EAAkB,GAAII,EAAe,GAAIA,EAAe,GAAIC,EAAc,CAAC,EAAG,EAAG,EAAG,EAAG,IAAKA,EAAc,CAAC,EAAG,EAAG,EAAG,EAAG,IAAKL,EAAkB,GAAIS,KAC9L7C,EAAUa,KAAI,SAACC,EAAMC,GACbD,IACAZ,EAAOa,GAASgC,EAAahC,OAGrCZ,EAAUS,GAiCND,GAEJb,EAAMyB,kBACP,CAACzB,EAAMwB,UAEVD,qBAAU,WACNG,IACAd,EAAaD,EAAY,KAC1B,CAACX,EAAM2B,QAGN,oCACKhB,EAAYX,EAAM2B,MAAQD,IAAqB,KAChD,yBAAKK,UAAU,gBACX,2BAAOA,UAAU,uBACb,+BACI,wBAAIA,UAAU,wBACV,wBAAIC,MAAM,MAAMD,UAAU,wBAA1B,iBACA,wBAAIC,MAAM,MAAMD,UAAU,wBAA1B,WAEH3B,EAAOW,KAAI,SAACC,EAAMC,GAAP,OACR,wBAAIc,UAAU,uBAAuBE,IAAK3B,EAAaW,IACnD,wBAAIe,MAAM,MAAMD,UAAU,wBACrBzB,EAAaW,IAElB,wBACIc,UAAW7B,EAAUe,GAAS,GAAK,WACnCiB,QAAS,kBAAME,EAAsBnB,KACvCD,OAGV,wBAAIe,UAAU,wBACV,wBAAIC,MAAM,MAAMD,UAAU,wBAA1B,0BACA,4BAAKxB,SC3GlB2C,EA/BE,WACb,OACI,yBAAKnB,UAAU,QACX,wBAAIA,UAAU,gBAAd,aACA,wBAAIA,UAAU,uBAAd,iBACA,yBAAKA,UAAU,cACX,kEACA,kEACA,sEACA,oEACA,oEACA,oEACA,6BACA,mOACA,0HAEJ,wBAAIA,UAAU,uBAAd,iBACA,yBAAKA,UAAU,cACX,oFACA,kFACA,2DACA,6DACA,kFACA,kFACA,iHACA,kGCTDoB,EAhBM,WAOjB,OACI,yBAAKpB,UAAU,YACX,wBAAIA,UAAU,oBAAd,oBACA,uBAAGA,UAAU,kBAAb,gCACA,4BAAQG,QAVA,WAGZ,OAFAkB,OAAOC,OAAO,EAAE,GAChBD,OAAOE,SAASC,UACT,IAOH,kB,gBC2FGC,EA/FF,WAAO,IAAD,EACWvD,mBAAS,GADpB,mBACRwD,EADQ,KACDC,EADC,OAEWzD,mBAAS,IAFpB,mBAER0B,EAFQ,KAEDgC,EAFC,OAGW1D,mBAAS,CAAC,KAAM,KAAM,KAAM,KAAM,OAH7C,mBAGRkB,EAHQ,KAGDyC,EAHC,OAImB3D,mBAAS,EAAC,GAAO,GAAO,GAAO,GAAO,IAJzD,mBAIR4D,EAJQ,KAIGC,EAJH,OAKe7D,oBAAS,GALxB,mBAKRuB,EALQ,KAKCuC,EALD,OAMiB9D,oBAAS,GAN1B,mBAMR+D,EANQ,KAMEC,EANF,KAOTC,EAAY,CAAC,EAAG,EAAG,EAAG,EAAG,GACzBC,EAAcC,MA+Bd3C,EAAgB,WAClBsC,GAAW,IAGT5B,EAAa,WACfuB,EAAS,GACTE,EAAS,CAAC,KAAM,KAAM,KAAM,KAAM,OAClCE,EAAa,EAAC,GAAO,GAAO,GAAO,GAAO,IAC1CH,EAAShC,EAAQ,IAGf0C,EAAc,kBAChB,yBAAKtC,UAAU,SACVZ,EAAMJ,KAAI,SAACC,EAAMC,GAAP,OACP,yBACIgB,IAAKiC,EAAUjD,GACfc,UAAW8B,EAAU5C,GAAS,eAAiB,OAC/CiB,QAAS,kBA5BD,SAAAhB,GACpB,IAAIJ,EAAY+C,EAChB/C,EAAUC,KAAI,SAACuD,EAAOrD,GACdA,IAAUC,IACVJ,EAAUG,IAAS,MAG3B6C,EAAahD,GACbqD,IAoB2BI,CAAgBtD,KAE9BD,QAUjB,OAJAO,qBAAU,WACN8C,OAIA,oCACKA,IACD,4BAAQnC,QA7DU,WACtB6B,GAAW,GACX,IAAIjD,EAAYK,EACZsC,EAAQ,EACR3C,EAAUC,KAAI,SAACC,EAAMC,GACrB,IAAK4C,EAAU5C,GAAQ,CACnB,IAAIuD,EAAcC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EAClD7D,EAAUG,GAASuD,EAEvB,OAAO1D,KAGP8D,MAAM,gEAEVlB,EAASD,EAAQ,GACjBG,EAAS9C,KA8CL,aACA,kBAAC,EAAD,CACIK,MAAOA,EACPK,QAASA,EACTC,cAAeA,EACfU,WAAYA,EACZR,MAAOA,IAEX,kBAAC,EAAD,CACIR,MAAOA,EACPK,QAASA,EACTC,cAAeA,EACfU,WAAYA,EACZR,MAAOA,KAETA,GAAS,kBAAC,EAAD,MACX,4BAAQO,QAAS,kBAAM+B,GAAaD,KAC/BA,EAAW,kBAAoB,qBAEnCA,GAAY,kBAAC,EAAD,QCvFVa,EATH,WACV,OACE,yBAAK9C,UAAU,QACb,wBAAIA,UAAU,UAAd,WACA,kBAAC,EAAD,QCFN+C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.3e22a75f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst UpperSection = props => {\r\n    const [wasChosen, setWasChosen] = useState([false, false, false, false, false, false]);\r\n    const [points, setPoints] = useState([null, null, null, null, null, null]);\r\n    const textForTable = [\"Ones\", \"Twos\", \"Threes\", \"Fours\", \"Fives\", \"Sixes\"];\r\n    const [normalPoints, setNormalPoints] = useState(0);\r\n    const [totalPoints, setTotalPoints] = useState(0);\r\n    const [infoRound, setInfoRound] = useState(14);\r\n     \r\n    const checkPossibilityToPlay = number => {\r\n        let newValues = props.dices\r\n        let actualPoints = 0;\r\n        let actualDice = number + 1;\r\n        newValues.map(item => {\r\n            if (item === actualDice) {\r\n                actualPoints += actualDice;\r\n            }\r\n        })\r\n        return actualPoints;\r\n    }\r\n\r\n    const settingPoints = () => {\r\n        let newValues = points;\r\n        newValues.map((item, index) => {\r\n            if (!wasChosen[index]) {\r\n                newValues[index] = checkPossibilityToPlay(index);\r\n            }\r\n            return newValues;\r\n        })\r\n        setPoints(newValues);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (props.dices[0] !== null && props.canPlay) {\r\n            settingPoints();\r\n        }\r\n        props.changeCanPlay();\r\n    }, [props.canPlay])\r\n\r\n    useEffect(() => {\r\n        resetTablePoints();\r\n        setInfoRound(infoRound - 1);\r\n    }, [props.round])\r\n\r\n    const handlePointTableClick = number => {\r\n        let newValues = wasChosen;\r\n        newValues[number] = true;\r\n        setWasChosen(newValues);\r\n        props.setDefault();\r\n        resetTablePoints();\r\n        sumUpPoints();\r\n    }\r\n\r\n    const sumUpPoints = () => {\r\n        setTotalPoints(0);\r\n        setNormalPoints(0);\r\n        let normalValue = normalPoints;\r\n        let totalValue = totalPoints;\r\n        normalValue = 0;\r\n        points.map(item => {\r\n            normalValue += item;\r\n        })\r\n        totalValue = normalValue;\r\n        if (normalValue > 63) {\r\n            totalValue += 100;\r\n        }\r\n        setTotalPoints(totalValue);\r\n        setNormalPoints(normalValue);\r\n    }\r\n\r\n    const resetTablePoints = () => {\r\n        let newValues = points;\r\n        newValues.map((item, index) => {\r\n            if (!wasChosen[index]) {\r\n                newValues[index] = null;\r\n            }\r\n        })\r\n        setPoints(newValues);\r\n    }\r\n\r\n    return (\r\n        <>  \r\n            <div className=\"upperSection\">\r\n                <table className=\"upperSection__table\">\r\n                    <tbody>\r\n                        <tr className=\"upperSection__column\">\r\n                            <th scope=\"col\" className=\"upperSection__strong\">Upper Section</th>\r\n                            <th scope=\"col\" className=\"upperSection__strong\">Points</th>\r\n                        </tr>\r\n                        {points.map((item, index) => (\r\n                            <tr className=\"upperSection__column\" key={textForTable[index]}>\r\n                                <th scope=\"row\" className=\"upperSection__strong\">\r\n                                    {textForTable[index]}\r\n                                </th>\r\n                                <td\r\n                                    className={wasChosen[index] ? \"\" : \"red-font\"}\r\n                                    onClick={() => handlePointTableClick(index)}\r\n                                >{item}</td>\r\n                            </tr>\r\n                        ))}\r\n                        <tr className=\"upperSection__column\">\r\n                            <th scope=\"row\" className=\"upperSection__strong\">Total</th>\r\n                            <td>{normalPoints}</td>\r\n                        </tr>\r\n                        <tr className=\"upperSection__column\">\r\n                            <th scope=\"row\" className=\"upperSection__strong\">Bonus (63+ points = 100)</th>\r\n                            <td>{normalPoints > 63 ? \"100\" : \"-\"}</td>\r\n                        </tr>\r\n                        <tr className=\"upperSection__column\">\r\n                            <th scope=\"row\" >Total of Upper Section</th>\r\n                            <td>{totalPoints}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n \r\nexport default UpperSection;","import React, { useState, useEffect } from 'react';\r\n\r\nconst LowerSection = props => {\r\n    const [wasChosen, setWasChosen] = useState([false, false, false, false, false, false, false, false]);\r\n    const [points, setPoints] = useState([null, null, null, null, null, null, null, null]);\r\n    const textForTable = [\"3 of kind\", \"4 of kind\", \"Odd\", \"Even\", \"Low straight\", \"High straight\", \"Yahtzee\", \"Chance\"];\r\n    const [normalPoints, setNormalPoints] = useState(0);\r\n    const [infoRound, setInfoRound] = useState(14);\r\n\r\n    const checkNumberOfKind = ruleNumber => {\r\n        let points = 0, amountofNumber = 0;\r\n        const numbers = [1, 2, 3, 4, 5, 6];\r\n        numbers.map(item => {\r\n            props.dices.map(dice => {\r\n                if (dice === item) {\r\n                    amountofNumber++;\r\n                }\r\n            })\r\n            if (amountofNumber >= ruleNumber) {\r\n                points = ruleNumber * item;\r\n                if (ruleNumber === 5) {\r\n                    points += 50;\r\n                }\r\n            }\r\n            amountofNumber = 0;\r\n        })\r\n        return points;\r\n    }\r\n\r\n    const checkOddOrEven = ruleNumber => {\r\n        let points = 0;\r\n        props.dices.map(item => {\r\n            if(item % 2 === ruleNumber) {\r\n                points += item;\r\n            }\r\n        })\r\n        return points\r\n    }\r\n\r\n    const checkStraight = tab => {\r\n        let points = 0;\r\n        let numbers = tab;\r\n        props.dices.map(item => {\r\n            numbers.map((number, index) => {\r\n                if (item === number) {\r\n                    points++;\r\n                    numbers[index] = 0;\r\n                }\r\n            })\r\n        })\r\n        if (points === 5) {\r\n            if (numbers[numbers.lenght - 1] === 6) return 20\r\n            else return 15\r\n        } else {\r\n            return 0\r\n        }\r\n    }\r\n\r\n    const checkChance = () => {\r\n        let sum = 0;\r\n        props.dices.map(item => {\r\n            sum += item\r\n        })\r\n        return sum\r\n    }\r\n\r\n    const settingPoints = () => {\r\n        let newValues = points;\r\n        const arrayOfRules = [checkNumberOfKind(3), checkNumberOfKind(4), checkOddOrEven(1), checkOddOrEven(0), checkStraight([1, 2, 3, 4, 5]), checkStraight([2, 3, 4, 5, 6]), checkNumberOfKind(5), checkChance()]\r\n        wasChosen.map((item, index) => {\r\n            if(!item) {\r\n                points[index] = arrayOfRules[index];\r\n            }\r\n        })\r\n        setPoints(newValues);\r\n    }\r\n\r\n    const resetTablePoints = () => {\r\n        let newValues = points;\r\n        newValues.map((item, index) => {\r\n            if (!wasChosen[index]) {\r\n                newValues[index] = null;\r\n            }\r\n        })\r\n        setPoints(newValues);\r\n    }\r\n\r\n    const sumUpPoints = () => {\r\n        setNormalPoints(0);\r\n        let normalValue = 0;\r\n        points.map(item => {\r\n            normalValue += item;\r\n        })\r\n        setNormalPoints(normalValue);\r\n    }\r\n\r\n    const handlePointTableClick = number => {\r\n        let newValues = wasChosen;\r\n        newValues[number] = true;\r\n        setWasChosen(newValues);\r\n        props.setDefault();\r\n        resetTablePoints();\r\n        sumUpPoints();\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (props.dices[0] !== null && props.canPlay) {\r\n            settingPoints();\r\n        }\r\n        props.changeCanPlay();\r\n    }, [props.canPlay])\r\n\r\n    useEffect(() => {\r\n        resetTablePoints();\r\n        setInfoRound(infoRound - 1)\r\n    }, [props.round])\r\n\r\n    return ( \r\n        <>\r\n            {infoRound > props.round ? resetTablePoints() : null }\r\n            <div className=\"upperSection\">\r\n                <table className=\"upperSection__table\">\r\n                    <tbody>\r\n                        <tr className=\"upperSection__column\">\r\n                            <th scope=\"col\" className=\"upperSection__strong\">Lower Section</th>\r\n                            <th scope=\"col\" className=\"upperSection__strong\">Points</th>\r\n                        </tr>\r\n                        {points.map((item, index) => (\r\n                            <tr className=\"upperSection__column\" key={textForTable[index]}>\r\n                                <th scope=\"row\" className=\"upperSection__strong\">\r\n                                    {textForTable[index]}\r\n                                </th>\r\n                                <td\r\n                                    className={wasChosen[index] ? \"\" : \"red-font\"}\r\n                                    onClick={() => handlePointTableClick(index)}\r\n                                >{item}</td>\r\n                            </tr>\r\n                        ))}\r\n                        <tr className=\"upperSection__column\">\r\n                            <th scope=\"row\" className=\"upperSection__strong\">Total of Lower Section</th>\r\n                            <td>{normalPoints}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n \r\nexport default LowerSection;","import React from 'react';\r\n\r\nconst HelpPage = () => {\r\n    return ( \r\n        <div className=\"help\">\r\n            <h2 className=\"help__header\">Help page</h2>\r\n            <h3 className=\"help__header--small\">Upper Section</h3>\r\n            <div className=\"help__text\">\r\n                <p>Ones: Get as many ones as possible.</p>\r\n                <p>Twos: Get as many twos as possible.</p>\r\n                <p>Threes: Get as many threes as possible.</p>\r\n                <p>Fours: Get as many fours as possible.</p>\r\n                <p>Fives: Get as many fives as possible.</p>\r\n                <p>Sixes: Get as many sixes as possible.</p>\r\n                <br />\r\n                <p>You’ll get as many points as many dice with the specific number you have. E.G. if you get 2,3,3,3,4 and you choose threes you will get 9 points because 3 dice for 3 points are equal to 3*3=9.</p>\r\n                <p>If you’ll have more than 63 points you will get a bonus which means 100 extra points.</p>\r\n            </div>\r\n            <h3 className=\"help__header--small\">Lower Section</h3>\r\n            <div className=\"help__text\">\r\n                <p>Three of a kind: Get three dice with the same number.</p>\r\n                <p>Four of a kind: Get four dice with the same number.</p>\r\n                <p>Odd: Sum of all odd numbers.</p>\r\n                <p>Even: Sum of all even numbers.</p>\r\n                <p>Small straight: Get five sequential dice 1,2,3,4,5.</p>\r\n                <p>Large straight: Get five sequential dice 2,3,4,5,6.</p>\r\n                <p>Chance: You can put anything into chance. The score is simply the sum of the dice.</p>\r\n                <p>Yahtzee: Five of a kind. Scores 50 points + sum of the five dice</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default HelpPage;","import React from 'react';\r\n\r\nconst FinishedGame = () => {\r\n    const restart = () => {\r\n        window.moveTo(0,0);\r\n        window.location.reload();\r\n        return false;\r\n    }\r\n    \r\n    return ( \r\n        <div className=\"finished\">\r\n            <h2 className=\"finished__header\">Congratulations!</h2>\r\n            <p className=\"finished__text\">You have finished your game.</p>\r\n            <button onClick={restart}>Restart Game</button>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default FinishedGame;","import React from 'react';\r\nimport UpperSection from './UpperSection';\r\nimport { useState } from 'react';\r\nimport LowerSection from './LowerSection';\r\nimport HelpPage from './HelpPage';\r\nimport FinishedGame from './FinishedGame';\r\nimport { useEffect } from 'react';\r\nimport useForceUpdate from 'use-force-update';\r\n\r\nconst Game = () => {\r\n    const [queue, setQueue] = useState(3);\r\n    const [round, setRound] = useState(14);\r\n    const [dices, setDices] = useState([null, null, null, null, null]);\r\n    const [blockItem, setBlockItem] = useState([false, false, false, false, false]);\r\n    const [canPlay, setCanPlay] = useState(false);\r\n    const [showHelp, setShowHelp] = useState(false);\r\n    const arrayOfID = [1, 2, 3, 4, 5];\r\n    const forceUpdate = useForceUpdate();\r\n\r\n    const handleButtonClick = () => {\r\n        setCanPlay(true);\r\n        let newValues = dices;\r\n        if (queue > 0 ) {\r\n            newValues.map((item, index) => {\r\n            if (!blockItem[index]) {\r\n                let randomValue = Math.floor(Math.random() * 6) + 1;\r\n                newValues[index] = randomValue;\r\n            }\r\n            return newValues\r\n        })\r\n        } else {\r\n            alert(\"You can not roll dice more than three times at single round!\")\r\n        }\r\n        setQueue(queue - 1);\r\n        setDices(newValues);\r\n    }\r\n\r\n    const handleDiceClick = number => {\r\n        let newValues = blockItem;\r\n        newValues.map((value, index) => {\r\n            if (index === number) {\r\n                newValues[index] = true;\r\n            }\r\n        })\r\n        setBlockItem(newValues);\r\n        forceUpdate();\r\n    }\r\n    \r\n    const changeCanPlay = () => {\r\n        setCanPlay(false);\r\n    }\r\n\r\n    const setDefault = () => {\r\n        setQueue(3);\r\n        setDices([null, null, null, null, null]);\r\n        setBlockItem([false, false, false, false, false]);\r\n        setRound(round - 1);\r\n    }\r\n\r\n    const renderTable = () => (\r\n        <div className=\"table\">\r\n            {dices.map((item, index) => (\r\n                <div \r\n                    key={arrayOfID[index]} \r\n                    className={blockItem[index] ? \"dice blocked\" : \"dice\"}\r\n                    onClick={() => handleDiceClick(index)}\r\n                    >\r\n                    {item}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n\r\n    useEffect(() => {\r\n        renderTable()\r\n    })\r\n\r\n    return ( \r\n        <>\r\n            {renderTable()}\r\n            <button onClick={handleButtonClick}>Roll dice</button>\r\n            <UpperSection \r\n                dices={dices}\r\n                canPlay={canPlay}\r\n                changeCanPlay={changeCanPlay}\r\n                setDefault={setDefault}\r\n                round={round}\r\n            />\r\n            <LowerSection \r\n                dices={dices}\r\n                canPlay={canPlay}\r\n                changeCanPlay={changeCanPlay}\r\n                setDefault={setDefault}\r\n                round={round}\r\n            />\r\n            {!round && <FinishedGame />}\r\n            <button onClick={() => setShowHelp(!showHelp)}>\r\n                {showHelp ? \"Close help page\" : \"Show me help page\"}\r\n            </button>\r\n            {showHelp && <HelpPage />}\r\n        </>\r\n    );\r\n}\r\n \r\nexport default Game;","import React from 'react';\r\nimport Game from './Game';\r\n\r\nconst App = () => {\r\n  return ( \r\n    <div className=\"game\">\r\n      <h1 className=\"header\">Yahtzee</h1>\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './sass/index.scss';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}